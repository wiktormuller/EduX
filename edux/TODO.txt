TODO List:
  [x] Implement logic to verify user's permissions
  [x] Add Dockerfile for app
  [x] Implement Outbox Processor
  [x] Add UoW registry
  [x] Clean up Shared Infrastructure project
  [x] Add Seq for logging
  [x] Add Serilog as a default logger
  [x] Performance tests with Nbomber
  [x] Implement in-memory communication between modules based on local contracts (or shared ones)
  [x] Learn about Domain Event Handlers
  [x] Mapping domain events to integration events
  [x] Add API Gateway
  [x] Add RabbitMqContainers for E2E testing
  [x] Add HttpClient extension method
  [x] Use Vault for safe app configuration
  [x] Implement Credential Lease for dynamically generated access to services as an alternative to centralized password storage (Vault)
  [x] Use ThreadLocal instead of ConcurrencyDictionary for storing the RabbitMQ Channels
  [x] Add Redis Integration
  [x] Add feature flags
  [x] Define metrics and add monitoring with OpenTracing -> Prometheus
  [x] Add Graphana as a consumer for Prometheus

  [x] Add Button in Swagger to Authentication
  [x] Add integration with Dapper - add factory for raw and open SqlConnection
  [x] Create documentation about Swagger/Available Modules/RabbitUI etc.
  [x] Add Validation for requests
  [x] Clean up shared projects structure

  [x] Register event handlers (domain)
  [x] Use portainer to manage services based on Docker
  [x] Implement Inbox Pattern
  [ ] Use SpecFlow for BDD Testing
  [ ] Use Benchmarking and Profiling
  [ ] Implement Auditing of user accounts
  [ ] Implement Multi-Tenancy
  [ ] Add unit and integration tests (also for refresh tokens)
  
  [ ] Implement missing actions for users module
  [ ] Extend Message Broker to handle some type of Envelope
  [ ] Extend Message Broker to handle many messages
  
  [ ] Implement UI for users module with React
  [ ] Add generic module for notifications
  [ ] Use SignalR to check some health-check in real-time
  [ ] Implement asynchronous action in API with some type of Webhook or SignalR backchannel to client after adding API Gateway (maybe some hybrid action?)
  [ ] Forward all requests via Gateway and hide modules
  [ ] Implement distributed tracing with Jaeger
  [ ] Add first ADRs
  [ ] Use Azure BlobStorage to store users profile images

  [ ] Implement components for consuming Integration Messages
  [ ] Implement some Saga via _Chronicle project
  [ ] Microservices registry with Consul and Fabio after distilling some part as a microservice
  [ ] Contracts tests with PACT.NET and PactBroker
  [ ] Use K8S with some Sidecars
  [ ] Use Rancher to manage K8S cluster and implement some Service Meshes with Istio
