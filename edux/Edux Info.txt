TODO List:
  [x] Implement logic to verify user's permissions
  [x] Add Dockerfile for app
  [x] Implement Outbox Processor
  [x] Add UoW registry
  [x] Clean up Shared Infrastructure project
  [x] Add Seq for logging
  [x] Add Serilog as a default logger
  [x] Performance tests with Nbomber
  [x] Implement in-memory communication between modules based on local contracts (or shared ones)
  [x] Learn about Domain Event Handlers
  [x] Mapping domain events to integration events
  [x] Add API Gateway
  [x] Add RabbitMqContainers for E2E testing
  [x] Add HttpClient extension method
  [ ] Use Vault for safe app configuration
  [ ] Add unit and integration tests (also for refresh tokens)
  [ ] Implement missing actions for users module
  [ ] Use ThreadLocal instead of ConcurrencyDictionary for storing the RabbitMQ Channels
  [ ] Create documentation about Swagger/Available Modules/RabbitUI etc.
  [ ] Add feature flags
  [ ] Extend Message Broker to handle some type of Envelope
  [ ] Extend Message Broker to handle many messages
  [ ] Implement Inbox Pattern
  [ ] Add first ADRs
  [ ] Define metrics and add monitoring with AppMetrics -> Prometheus -> Grafana
  [ ] Implement distributed tracing with Jaeger
  [ ] Implement components for consuming Integration Messages
  [ ] Implement some Saga via _Chronicle project
  [ ] Implement asynchronous action in API with some type of Webhook or SignalR backchannel to client after adding API Gateway (maybe some hybrid action?)
  [ ] Microservices registry with Consul and Fabio after distilling some part as a microservice
  [ ] Contracts tests with PACT.NET and PactBroker
  [ ] Use portainer to manage services based on Docker
  [ ] Use K8S with some Sidecars
  [ ] Use Rancher to manage K8S cluster and implement some Service Meshes with Istio
  [ ] Implement Credential Lease for dynamically generated access to services as an alternative to centralized password storage (Vault)


EF Core:

  dotnet ef migrations add Users_Module_Init --startup-project ..\..\..\Bootstrapper\Edux.Bootstrapper\ -o ./EF/Migrations --context UsersWriteDbContext

  dotnet ef database update --startup-project ..\..\..\Bootstrapper\Edux.Bootstrapper\ --context UsersWriteDbContext

Docker:

  docker build -t edux .

  docker run -it --rm -p 5000:80 --name edux_container edux

  docker compose -f infrastructure.yml up -d
  docker compose -f infrastructure.yml down

NBomber:
  dotnet run -c Release (Bootstrapper)
  dotnet test
  EduX\tests\Modules\Users\Edux.Modules.Users.Tests.Performance\bin\Debug\net7.0\reports
